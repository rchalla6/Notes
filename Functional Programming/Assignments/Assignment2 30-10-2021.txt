Question1:
----------
using LaYumba.Functional;
using System;
using static LaYumba.Functional.F;

namespace Assignment2
{
    public static class Question1
    {
        public static Func<string, Option<DayOfWeek>> convertToEnum = (day) 
            => System.Enum.TryParse<DayOfWeek>(day, out DayOfWeek dayOfWeek) ? System.Enum.Parse<DayOfWeek>(day) : None;
        public static void Main(string[] args)
        {
            Option<DayOfWeek> validDay = convertToEnum("Friday");
            Console.WriteLine(validDay); // Valid : Some(Friday)
            Option<DayOfWeek> invalidDay = convertToEnum("Freeday");
            Console.WriteLine(invalidDay); // Invalid : None
        }
        public enum DayOfWeek
        {
            Monday,
            Tuesday,
            Wednesday,
            Thursday,
            Friday,
            Saturday,
            Sunday
        }
    }
}


Question 2:
-----------

using LaYumba.Functional;
using System;
using System.Text.RegularExpressions;
using static LaYumba.Functional.F;

namespace Assignment2
{
    public static class Question2
    {
        public static void Main(string[] args)
        {
            Option<EmailValidation> emailResponse1 = EmailValidation.Create("assignment@gmail.com");
            Console.WriteLine(emailResponse1); // Valid : Some(Assignment2.Email)
            Option<EmailValidation> emailResponse2 = EmailValidation.Create("assignment@gmail");
            Console.WriteLine(emailResponse2); // Invalid: None
        }
    }
    public class EmailValidation
    {
        static readonly Regex regularExpressionForEmailCheck = new Regex(@"^([\w\.\-]+)@([\w\-]+)((\.(\w){2,3})+)$");
        private string email { get; }
        private EmailValidation(string value) => email = value;
        public static Option<EmailValidation> Create(string s) => regularExpressionForEmailCheck.IsMatch(s) ? Some(new EmailValidation(s)): None;

        public static implicit operator string(EmailValidation e) => e.email;
    }
}


Question 3:
-----------

using LaYumba.Functional;
using System;
using static LaYumba.Functional.F;

namespace Assignment2
{
    public static class Question3
    {
        static Func<int, Option<int>> isPrime = number => validInt(number) && checkprime(number) ? Some(number) : None;
        static Func<int, bool> validInt = number => number > 1;
        static Func<int, bool> checkprime = number =>
        {
            for (int a = 2; a <= number / 2; a++)
                if (number % a == 0)
                    return false;
            return true;
        };
        public static void Main(string[] args)
        {
            Option<int> test1 = isPrime(11);
            Console.WriteLine(test1); // Prime : Some(11)
            Option<int> test2 = isPrime(8);
            Console.WriteLine(test2); // Not Prime : None
            Option<int> test3 = isPrime(29);
            Console.WriteLine(test3); // Prime : Some(29)
            Option<int> test4 = isPrime(-11);
            Console.WriteLine(test4); // Invalid Number : None
        }
    }
}


Question 4:
-----------

using LaYumba.Functional;
using System;
using System.Collections.Generic;
using static LaYumba.Functional.F;

namespace Assignment2
{
    public static class Question4
    {
        public static Func<IEnumerable<int>, Func<int, bool>, Option<int>> Lookup = (enumerableList, predicate) => {
            foreach (int item in enumerableList)
                if (predicate(item)) return Some(item);
            return None;
        };

        public static void Main(string[] args)
        {
            Func<int, bool> predicateEven = i => i % 2 == 0;
            Option<int> response1 = Lookup(new List<int> {1,3,5},predicateEven); // => None
            Console.WriteLine(response1);
            Option<int> response2= Lookup(new List<int> { 1,4,5,8 },predicateEven); // => Some(4)
            Console.WriteLine(response2);
        }
    }
}
