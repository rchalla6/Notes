Question 1:
-----------

using System;
using System.Linq;

namespace AssignmentIVA
{
    public class Program1
    {
        public static void Main(string[] args)
        {

        }
    }
    public static class LinkedList
    {
        public static List<T> List<T>(T h, List<T> t) => new List<T>(h, t);
        public static List<T> List<T>(params T[] items) => items.Reverse().Aggregate(new List<T>(),(tail, head) => List(head, tail));
        public static List<T> InsertAt<T>(this List<T> @this, int m, T value) => m == 0 ? List(value, @this) : @this.Match(
              () => { throw new IndexOutOfRangeException(); }, (head, tail) => List(head, tail.InsertAt(m - 1, value)));
        public static List<T> RemoveAt<T>(this List<T> @this, int m, T value) => m == 0 ? List(value, @this) : @this.Match(
              () => { throw new IndexOutOfRangeException(); }, (head, tail) => List(head, tail.RemoveAt(m - 1, value)));
    }

    public sealed class List<T>
    {
        readonly bool isEmpty;
        readonly T head;
        readonly List<T> tail;
        // Empty list
        internal List() { isEmpty = true; }
        // Non Empty list
        internal List(T head, List<T> tail)
        {
            this.head = head;
            this.tail = tail;
        }
        public R Match<R>(Func<R> Empty, Func<T, List<T>, R> Cons)
           => isEmpty ? Empty() : Cons(head, tail);
    }
}

Question 1 Version 2:
---------------------

using System;

namespace AssignmentIVA
{
    public class Program1
    {
        public static void Main(string[] args)
        {
            LinkedList linkedList = new LinkedList();
            linkedList.AddAtLast("Steve");
            linkedList.AddAtLast("John");
            linkedList.AddAtLast("Peter");
            linkedList.AddAtLast("Robert");
            linkedList.PrintAllNodes();
            Console.WriteLine("\nAfter adding new node at position 2");
            linkedList.InsertAt("Rogers",2);
            linkedList.PrintAllNodes();
            Console.WriteLine("\nAfter removing node at position 3");
            linkedList.RemoveAt(3);
            linkedList.PrintAllNodes();
            Console.WriteLine("\nIterating till Peter");
            linkedList.ListUntil("Peter");
            Console.WriteLine("\nIterating till Dave");
            linkedList.ListUntil("Dave");
            Console.ReadKey();
        }
    }
    public class Node
    {
        public Node Next;
        public string Value;
    }

    public class LinkedList
    {
        private static Node head;
        private static Node tail;
        public LinkedList()
        {
            head = new Node();
            tail = head;
        }

        public Action<string> AddAtLast = data =>
        {
            Node newNode = new Node
            {
                Value = data
            };
            tail.Next = newNode;
            tail = newNode;
        };

        public Action<string> AddAtStart = data =>
        {
            Node newNode = new Node() { Value = data };
            newNode.Next = head.Next;
            head.Next = newNode;
        };

        public Action<string,int> InsertAt = (data,index) => {
            int count = 0;Node node = head;Node prev = null;
            while (count != index)
            {
                count++; prev = node; node = node.Next;
            }
            Node newNode = new Node {
                Value = data,
                Next = node
            };
            if (count == 0)
                head = newNode;
            else
                prev.Next = newNode;
        };

        public Action<int> RemoveAt = (index) =>{
            if (head == null)
                return;

            Node temp = head;

            if (index == 0)
                head = temp.Next;

            for (int i = 0; temp != null && i < index - 1; i++)
                temp = temp.Next;

            if (temp == null || temp.Next == null)
                return;

            Node next = temp.Next.Next;
            temp.Next = next;
        };

        public Action<string> ListUntil = (data) => {
            if (head == null)
            {
                Console.WriteLine("Cannot find the item in the question");
                return;
            }

            Node temp = head.Next;
            if (temp.Value.Equals(data))
                Console.WriteLine("Head -> " + temp.Value);
            bool found = false;
            while(temp != null)
            {
                if (temp.Value.Equals(data))
                {
                    Node temp1 = head.Next;
                    Console.Write("Head");
                    while (true)
                    {
                        Console.Write(" -> " + temp1.Value);
                        if (temp1.Value.Equals(data))
                        {
                            found = true;
                            break;
                        }
                        temp1 = temp1.Next;
                    }
                }
                if (found) break;
                temp = temp.Next;
            }
            if(!found)
                Console.WriteLine("Cannot find the item in the question");
        };

        public void PrintAllNodes()
        {
            Console.Write("Head ->");
            Node curr = head;
            while (curr.Next != null)
            {
                curr = curr.Next;
                Console.Write(curr.Value);
                Console.Write("->");
            }
            Console.Write("NULL\n");
        }
    }
}

Question 2:
-----------

using LaYumba.Functional;
using System;
using System.Collections.Generic;
using System.Linq;

namespace AssignmentIVA
{
    class Program2
    {
        static void Main(string[] args)
        {
            List<Order> listOfOrders = new List<Order>
            {
                new Order("Steve", 3, (decimal)12.3),
                new Order("Robert", 4, (decimal)16.8),
                new Order("Nat", 1, (decimal)2.3),
                new Order("Hawk", 2, (decimal)1.8),
                new Order("Selena", 3, (decimal)10.3),
                new Order("Taylor", 2, (decimal)4.1)
            };

            Func<List<Order>, List<Order>> minimum3Pizza = (allOrdersList) => allOrdersList.FindAll(x => x.Pizza >= 3);
            Func<List<Order>, List<string>> moreThan2PizzaNames = 
                (allOrdersList) => allOrdersList.FindAll(x => x.Pizza >= 3).Select(x => x.NameOnOrder).ToList();
            Func<List<Order>, decimal> sumOfAllOrder = (allOrdersList) => allOrdersList.Sum(x => x.TotalCost);

            Console.WriteLine("List of orders with atleast 3 pizzas are: ");
            foreach (var order in minimum3Pizza(listOfOrders))
                Console.WriteLine(string.Join(",", "Name: "+ order.NameOnOrder,"No of pizzas: "+ order.Pizza,"Total cost: " + order.TotalCost));
            Console.WriteLine("\nList of people who ordered more than 2 pizzas are: " + string.Join(",",moreThan2PizzaNames(listOfOrders)));
            Console.WriteLine("\nTotal amount of money made with all orders: " + sumOfAllOrder(listOfOrders));
        }
    }
    public class Order
    {
        public Order(string nameOnOrder, int pizza, decimal totalCost)
        {
            NameOnOrder = nameOnOrder;
            Pizza = pizza;
            TotalCost = totalCost;
        }
        public string NameOnOrder { get; private set; }
        public int Pizza { get; private set; }
        public decimal TotalCost { get; private set; }
    }
}

Question 3:
-----------

using LaYumba.Functional;
using System;
using static LaYumba.Functional.F;

namespace AssignmentIVA
{
    class Program3
    {
        static void Main(string[] args)
        {
            Func<double, double, int> BMI = (weight, height) => Convert.ToInt32(weight / (height * height));
            Console.WriteLine($" The BMI for a given weight(in kg) and height(in metre) is: {Some(65.4).Map(BMI).Apply(Some(1.43))}"); // 32
            Console.WriteLine($" The BMI for a given weight(in kg) and height(in metre) is: {Some(58.2).Map(BMI).Apply(Some(1.63))}"); // 22
        }
    }
}