Question 1:
-----------

=>Reasoning: 

People book rooms for meeting and for this problem we will use either concept to get the timeslots with availability and error message when slots
are not available or invalid data provided

=>Program:

using LaYumba.Functional;
using System;
using System.Collections.Generic;

namespace FP
{
    class EitherProgram
    {
        public static Either<string, int> findAvailableTimeSlots(List<Tuple<int, bool>> listOfSlots, int hours)
        {
            if (hours <= 0) return "Booking time cannot be less than or equal to 0";
            if (hours > 1) return "Cannot book more than 1 hours";
            foreach (Tuple<int, bool> tuple in listOfSlots)
            {
                if (tuple.Item2)
                    return tuple.Item1;
            }
            return "No slots available";
        }
        static void Main(string[] args)
        {
            List<Tuple<int, bool>> timeSlotsList = new List<Tuple<int, bool>>();
            timeSlotsList.AddRange(new List<Tuple<int, bool>>() {Tuple.Create(9, false), Tuple.Create(10, true), Tuple.Create(11, true),
                Tuple.Create(12, false), Tuple.Create(13, true), Tuple.Create(14, false), Tuple.Create(15, true), Tuple.Create(16, true)});

            Console.WriteLine("Available timeslot for 0 hours: " + findAvailableTimeSlots(timeSlotsList, 0));
            Console.WriteLine("Available timeslot for 1 hour : " + findAvailableTimeSlots(timeSlotsList, 1));
            Console.WriteLine("Available timeslot for 2 hours: " + findAvailableTimeSlots(timeSlotsList, 2));
        }
    }
}

Question 2:
-----------

=>Reasoning: 

In mathematics calculating distance between 2 points is very common and important scenario and we use the apply concept to calculate the distance
using the formula d=√SquareOf(x2−x1)+SquareOf(y2−y1)

=>Program:

using LaYumba.Functional;
using System;
using static LaYumba.Functional.F;

namespace FP
{
    class ApplyProgram
    {
        static void Main(string[] args)
        {
            Func<int, int, int> sub = (first, second) => second - first;
            Func<int, int> square = (num) => num * num;
            Func<int, int, int> Add = (first, second) => first + second;
            Func<int, double> sqRoot = (num) => Math.Sqrt(num);
            Console.WriteLine("Distance between points (1,2), (2,5) is: " + 
                Some(sqRoot).
                    Apply(Some(Add)
                            .Apply(Some(sub)
                                .Apply(1)
                                .Apply(2)
                                .Map(square))
                            .Apply(Some(sub)
                                .Apply(2)
                                .Apply(5)
                                .Map(square))
                          )
                    );
        }
    }
}