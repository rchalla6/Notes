Question 1:
-----------

=>Reasoning: 

When we search for products online the product may or may not be available. We will use either concept to get different results

=>Program:

using LaYumba.Functional;
using System;
using System.Collections.Generic;

namespace FuncProg
{
    class EitherProgram
    {
        public static Either<string, double> findPrdoductInInventory(string product, List<Tuple<string, bool, string, double>> inventoryList)
        {
            Tuple<string, bool, string, double> tuple = inventoryList.Find(x => x.Item1.Equals(product));
            if (tuple == null) return "Product is not available in inventory";
            else if (!tuple.Item2 && tuple.Item3.Equals("")) return "Product is out of stock";
            else if (!tuple.Item2 && !tuple.Item3.Equals("")) return "Product will be available from " + tuple.Item3;
            else if (tuple.Item2 && tuple.Item4 > 0) return tuple.Item4;
            return "Invalid";
        }
        static void Main(string[] args)
        {
            List<Tuple<string, bool, string, double>> inventoryList = new();
            inventoryList.Add(Tuple.Create("iPhone SE", false, "", 0.0));
            inventoryList.Add(Tuple.Create("Mac Pro", false, "June 2022", 0.0));
            inventoryList.Add(Tuple.Create("AirTag", true, "", 29.0));

            Console.WriteLine("iPhone 5  :" + findPrdoductInInventory("iPhone 5", inventoryList));
            Console.WriteLine("iPhone SE :" + findPrdoductInInventory("iPhone SE",inventoryList));
            Console.WriteLine("Mac Pro   :" + findPrdoductInInventory("Mac Pro",inventoryList));
            Console.WriteLine("AirTag    :" + findPrdoductInInventory("AirTag",inventoryList));
        }
    }
}
Question 2:
-----------

=>Reasoning: 

In shops we will have price for products and there will be different discounts based on the membershipand the net price of the product will 
be original price - discount and tax will be levied on this. We will use apply concept to find the final price of the product

=>Program:

using LaYumba.Functional;
using System;
using static LaYumba.Functional.F;

namespace FuncProg
{
    class ApplyProgram
    {
        static void Main(string[] args)
        {
            Func<double, double, double> priceAfterDiscount = (price, membership) =>
            {
                if (membership == 1)
                    return price - price * 10 / 100;
                if (membership == 2)
                    return price - price * 15 / 100;
                return price - price * 5 / 100;
            };
            Func<double, int, double> finalPrice = (netPriceAfterDiscount, tax) => netPriceAfterDiscount + netPriceAfterDiscount * tax / 100;
            Console.WriteLine("Final price of product with original price of $100 with gold membership and 8% tax is: " +
                Some(finalPrice)
                    .Apply(Some(priceAfterDiscount)
                               .Apply(100)
                               .Apply(1))
                    .Apply(8));
            Console.WriteLine("Final price of product with original price of $100 with diamond membership and 10% tax is: " +
                Some(finalPrice)
                    .Apply(Some(priceAfterDiscount)
                            .Apply(100)
                            .Apply(2))
                    .Apply(10));
            Console.WriteLine("Final price of product with original price of $100 with no membership and 10% tax is: " +
                Some(finalPrice)
                    .Apply(Some(priceAfterDiscount)
                            .Apply(100)
                            .Apply(0))
                    .Apply(10));
        }
    }
}