Version 1:
==========

Question 1:
-----------

=>Reasoning: 

Usually company provide the bonus to employees based on some criteria. Here we consider the conditions that the employee should be working
in the company for atleast 12 months and should not be in notice period

=>Program:

using LaYumba.Functional;
using System;

namespace FunctionalProgramming
{
    class Either
    {
        public static Either<string, int> calculateBonus(int a, bool b)
        {
            if (a < 12) return " Not eligible : Must have worked in the company for atleast 12 months";
            if (b) return "Not eligible : Employees on notice period are not eligible for Bonus";
            return 5000;
        }
        static void Main(string[] args)
        {
            Console.WriteLine("Bonus: " + calculateBonus(9, false)); // Left( Not eligible : Must have worked in the company for atleast 12 months)
            Console.WriteLine("Bonus: " + calculateBonus(13, false)); // Right(5000)
            Console.WriteLine("Bonus: " + calculateBonus(21, true)); //  Left(Not eligible : Employees on notice period are not eligible for Bonus)
        }
    }
}

Question 2:
-----------

=>Reasoning: 

We use apply concept to calculate the SimpleInterest for a given principal, rate of interest and tenure

=>Program:

using LaYumba.Functional;
using System;
using static LaYumba.Functional.F;

namespace FunctionalProgramming
{
    class Apply
    {
        static void Main(string[] args)
        {
            Func<int, double, int, double> SimpleInterest = (principal, interest, tenure) => (principal * interest * tenure / 12) / 100;
            Console.WriteLine($" Simple Interest for given principal, rate of interest per annum and tenure in months is: " +
                $"  {Some(1000).Map(SimpleInterest).Apply(Some(5.0)).Apply(Some(12))}"); // 50
            Console.WriteLine($" Simple Interest for given principal, rate of interest per annum and tenure in months is: " +
                $"  {Some(2000).Map(SimpleInterest).Apply(Some(4.5)).Apply(Some(24))}"); // 180

        }
    }
}

----------------------------------------------------------------------

Version 2:
==========

Question 1:
-----------

=>Reasoning: 

People book rooms for meeting and for this problem we will use either concept to get the timeslots with availability and error message when slots
are not available or invalid data provided

=>Program:

using LaYumba.Functional;
using System;
using System.Collections.Generic;

namespace FP
{
    class EitherProgram
    {
        public static Either<string, List<int>> findAvailableTimeSlots(List<Tuple<int, bool>> listOfSlots, int hours)
        {
            if (hours <= 0) return "Booking time cannot be less than or equal to 0";
            if (hours > 1) return "Cannot book more than 1 hours";
            bool atleast1SlotAvailable = false;
            List<int> availableTimeSlots = new List<int>();
            foreach(Tuple<int, bool> tuple in listOfSlots)
            {
                if (tuple.Item2)
                {
                    atleast1SlotAvailable = true;
                    availableTimeSlots.Add(tuple.Item1);
                }
            }
            if (!atleast1SlotAvailable) return "No slots available";
            return availableTimeSlots;
        }
        static void Main(string[] args)
        {
            List<Tuple<int, bool>> timeSlotsList = new();
            timeSlotsList.AddRange(new List<Tuple<int, bool>>() {Tuple.Create(9, false), Tuple.Create(10, true), Tuple.Create(11, true), 
                Tuple.Create(12, false), Tuple.Create(13, true), Tuple.Create(14, false), Tuple.Create(15, true), Tuple.Create(16, true)});
            Console.WriteLine(findAvailableTimeSlots(timeSlotsList, 0).Left ?? string.Join(",", findAvailableTimeSlots(timeSlotsList, 0).Right));
            Console.WriteLine(findAvailableTimeSlots(timeSlotsList, 1).Left ?? string.Join(",", findAvailableTimeSlots(timeSlotsList, 1).Right));
            Console.WriteLine(findAvailableTimeSlots(timeSlotsList, 2).Left ?? string.Join(",", findAvailableTimeSlots(timeSlotsList, 2).Right));
        }
    }
}

Question 2:
-----------

=>Reasoning: 

In mathematics calculating distance between 2 points is very common and important scenario and we use the apply concept to calculate the distance
using the formula d=√SquareOf(x2−x1)+SquareOf(y2−y1)

=>Program:

using LaYumba.Functional;
using System;
using static LaYumba.Functional.F;

namespace FP
{
    class ApplyProgram
    {
        static void Main(string[] args)
        {
            Func<int, int, int> sub = (first, second) => second - first;
            Func<int, int> square = (num) => num * num;
            Func<int, int, int> Add = (first, second) => first + second;
            Func<int, double> sqRoot = (num) => Math.Sqrt(num);
            Console.WriteLine("Distance between points (1,2), (2,5) is: " + 
                Some(sqRoot).
                    Apply(Some(Add)
                            .Apply(Some(sub)
                                .Apply(1)
                                .Apply(2)
                                .Map(square))
                            .Apply(Some(sub)
                                .Apply(2)
                                .Apply(5)
                                .Map(square))
                          )
                    );
        }
    }
}

----------------------------------------------------------------------

Version 3:
==========

Question 1:
-----------

=>Reasoning: 

In shops there will be different amount of discounts for different purchase amounts. We will use either concept to calculate discounts and the 
conditions we take are no discounts for purchase amount below 100, 5% discount for purchase amount between 100 and 300 and 10% discount for 
purchases more than 300

=>Program:

using LaYumba.Functional;
using System;

namespace ConsoleApp
{
    class Program1
    {
        public static Either<string, double> disCount(int purchaseAmount)
        {
            if (purchaseAmount <= 0) return "Purchase amount should be more than 0 to check for discounts";
            if (purchaseAmount < 100) return " There is no discount for purchases for amount below $100";
            else if (purchaseAmount >= 100 && purchaseAmount < 300) return Math.Round((double)purchaseAmount * 0.05);
            return Math.Round((double)purchaseAmount * 0.1);
        }
        static void Main(string[] args)
        {
            Console.WriteLine("Discount for the purchase(-50) is - " + disCount(-50)); 
            Console.WriteLine("Discount for the purchase(180) is - " + disCount(180));
            Console.WriteLine("Discount for the purchase(320) is - " + disCount(320));
            Console.WriteLine("Discount for the purchase(90) is - " + disCount(90));
        }
    }
}

Question 2:
-----------

=>Reasoning: 

In shops we will have price for products and there will be discounts and the net price of the product will be original price - discount and tax
will be levied on this. We will use apply concept to find the final price of the product

=>Program:

using LaYumba.Functional;
using System;
using static LaYumba.Functional.F;

namespace ConsoleApp
{
    class Program2
    {
        static void Main(string[] args)
        {
            Func<double, double, double> priceAfterDiscount = (price, discount) => price - price * discount / 100;
            Func<double, int, double> finalPrice = (priceAfterDiscount, tax) => priceAfterDiscount + priceAfterDiscount * tax / 100;
            Console.WriteLine("Final price of product with original price of 100 and 5% discount and 8% tax is:" + 
                Some(finalPrice).Apply(Some(priceAfterDiscount).Apply(100).Apply(5)).Apply(8));
            Console.WriteLine("Final price of product with original price of 100 and no discount and 10% tax is:" +
                Some(finalPrice).Apply(Some(priceAfterDiscount).Apply(100).Apply(0)).Apply(10));
        }
    }
}

----------------------------------------------------------------------

Version 4:
==========

Question 1:
-----------

=>Reasoning: 

Usually while we set passwords there will be some conditions to be met. We will use either concept to check the conditions and if all the
conditions are met we will return the length of the password

=>Program:

using LaYumba.Functional;
using System;
using System.Linq;

namespace App
{
    class Either
    {
        private static readonly char[] SpecialChars = "!@#$%^&*()".ToCharArray();
        public static Either<string, int> validatePassword(string password)
        {
            int indexOf = password.IndexOfAny(SpecialChars);
            if (password.Length < 8) return "Length of the password should be minimum of 8 characters length";
            else if (password.ToLower().Equals(password)) return "There should be atleast one capital letter";
            else if (!password.Any(char.IsDigit)) return "There should be atleast one numeric character";
            else if (indexOf == -1) return "There should be atleast one special character";
            return password.Length;
        }
        static void Main(string[] args)
        {
            Console.WriteLine("M1ckey       :" + validatePassword("M1ckey")); // Length fail
            Console.WriteLine("m1ckeym0use  :" + validatePassword("m1ckeym0use")); // Capital letter fail
            Console.WriteLine("MickeyMouse  :" + validatePassword("MickeyMouse")); // Numeric character fail
            Console.WriteLine("M1ckeyM0use  :" + validatePassword("M1ckeyM0use")); // Specical character fail
            Console.WriteLine("M1ckeyM0use@ :" + validatePassword("M1ckeyM0use@")); // Valid
        }
    }
}

Question 2:
-----------

=>Reasoning: 

We will use apply concept to find the kinetic energy with a given mass and velocity

=>Program:

using LaYumba.Functional;
using System;
using static LaYumba.Functional.F;

namespace App
{
    class Apply
    {
        static void Main(string[] args)
        {
            Func<double, double> velocity = (vel) => vel * vel;
            Func<double, int, double> energy = (mass, velocity2) => 0.5 * mass * velocity2;
            Console.WriteLine("Kinetic energy with mass 250kg and Velocity 10m/s is :" + 
                Some(energy).Apply(Some(velocity).Apply(10)).Apply(250) + " joules");
            Console.WriteLine("Kinetic energy with mass 175kg and Velocity 20m/s is :" +
                Some(energy).Apply(Some(velocity).Apply(20)).Apply(175) + " joules");
        }
    }
}