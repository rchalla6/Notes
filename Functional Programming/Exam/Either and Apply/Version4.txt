Question 1:
-----------

=>Reasoning: 

We will use either concept to validate the SSN number and if all the conditions are met then we will return true indicating that the SSN is valid

=>Program:

using LaYumba.Functional;
using System;
using System.Linq;

namespace App
{
    class Either
    {
        private static readonly char[] SpecialChars = "!@#$%^&*()".ToCharArray();
        public static Either<string, bool> validateSSN(string ssnNumber)
        {
            int indexOf = ssnNumber.IndexOfAny(SpecialChars);
            if (ssnNumber.Length != 11) return "Length of the SSN should be 9 digits seperated by 2 hyphens at position 4 and 7";
            else if (ssnNumber.Any(char.IsLetter)) return "There should not be any alphabets";
            else if (indexOf != -1) return "There should not be any special characters";
            else if (!(ssnNumber[3] == '-' && ssnNumber[6] == '-')) return "Characters at position 4 and 7 should be hyphens(-)";
            else if (ssnNumber.Substring(0, 3).Equals("000") || ssnNumber.Substring(0, 3).Equals("666") ||
                Convert.ToInt32(ssnNumber.Substring(0, 3)) >= 900) return "The first part should have 3 digits and should not be 000, 666, or between 900 and 999";
            else if (ssnNumber.Substring(4, 2).Equals("00")) return "The second part should have 2 digits and it should be from 01 to 99";
            else if (ssnNumber.Substring(7, 4).Equals("0000")) return "The third part should have 4 digits and it should be from 0001 to 9999";
            return true;
        }
        static void Main(string[] args)
        {
            Console.WriteLine("SSN validation and true will be returned if the SSN is valid");
            Console.WriteLine("856-452-6789 :" + validateSSN("856-452-6789".Trim())); // Length fail
            Console.WriteLine("396-a1-6789  :" + validateSSN("396-a1-6789".Trim())); // Alphabet fail
            Console.WriteLine("510-1@-6789  :" + validateSSN("510-1@-6789".Trim())); // Special Character fail
            Console.WriteLine("85-645-0000  :" + validateSSN("85-645-0000".Trim())); // hyphens fail
            Console.WriteLine("000-45-6789  :" + validateSSN("000-45-6789".Trim())); // First part fail
            Console.WriteLine("826-00-6789  :" + validateSSN("826-00-6789".Trim())); // Second part fail
            Console.WriteLine("742-45-0000  :" + validateSSN("742-45-0000".Trim())); // Third part fail
            Console.WriteLine("856-45-6789  :" + validateSSN("856-45-6789".Trim())); // Valid
        }
    }
}

Question 2:
-----------

=>Reasoning: 

We will use apply concept to find all the available modes of transport from one point to another point

=>Program:

using LaYumba.Functional;
using System;
using System.Collections.Generic;
using static LaYumba.Functional.F;

namespace App
{
    class Apply
    {
        static void Main(string[] args)
        {
            List<Tuple<string,string, string, string>> list = new();
            list.Add(Tuple.Create("air", "PointA", "PointB", "10:00"));
            list.Add(Tuple.Create("road", "PointA", "PointB", "11:15"));
            list.Add(Tuple.Create("train", "PointB", "PointC", "16:10"));
            list.Add(Tuple.Create("air", "PointB", "PointC", "05:20"));
            list.Add(Tuple.Create("road", "PointC", "PointD", "21:20"));

            Func<string, string, string, string> findTransport = (mode, source, dest) =>
            {
                bool found = false;
                string availableTimes = "";
                foreach (Tuple<string, string, string, string> tuple in list)
                {
                    if (tuple.Item1.Equals(mode) && tuple.Item2.Equals(source) && tuple.Item3.Equals(dest))
                    {
                        found = true;
                        availableTimes = availableTimes.Equals("") ? availableTimes + tuple.Item4 : availableTimes + ", " + tuple.Item4; 
                    }
                }
                if (found) return mode + " transport is available at times : " + availableTimes;
                return mode + " transport is not available";
            };

            Func<string, string, string, string> combineTransports = (mode1, mode2, mode3) => "Transport availability:\n" + mode1 +"\n" + mode2 + "\n" + mode3;

            Console.WriteLine("From PointA to PointB transport availability is:\n" +
                Some(combineTransports)
                    .Apply(Some(findTransport).Apply("air").Apply("PointA").Apply("PointB"))
                    .Apply(Some(findTransport).Apply("road").Apply("PointA").Apply("PointB"))
                    .Apply(Some(findTransport).Apply("train").Apply("PointA").Apply("PointB")));
        }
    }
}