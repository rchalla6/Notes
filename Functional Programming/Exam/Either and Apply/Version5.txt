Question 1:
-----------

=>Reasoning: 

We will use either concept to get the loan approved

=>Program:

using LaYumba.Functional;
using System;

namespace ConsoleApplication
{
    class EitherProb
    {
        public static Either<string, int> findLoanApproved(int creditScore, int salary)
        {
            if (creditScore < 0) return "Credit score cannot be negative";
            else if (salary < 0) return "Salary cannot be negative";
            else if (creditScore < 300) return "Loan can't be approved for credit score less than 300";
            else if (salary < 40000) return "loan can't be approved for salary less than $40000";
            else if (creditScore < 500 && salary < 80000) return 400000;
            else if (creditScore > 600 && salary < 100000) return 600000;
            return 800000;
        }
        static void Main(string[] args)
        {
            Console.WriteLine("Loan Status with credit score(-200) and salary($100000):" + findLoanApproved(-200,100000)); 
            Console.WriteLine("Loan Status with credit score(600) and salary($-80000) :" + findLoanApproved(600,-80000));
            Console.WriteLine("Loan Status with credit score(290) and salary($110000) :" + findLoanApproved(290,110000));
            Console.WriteLine("Loan Status with credit score(590) and salary($35000)  :" + findLoanApproved(590,35000));
            Console.WriteLine("Loan Status with credit score(490) and salary($70000)  :" + findLoanApproved(490,70000));
            Console.WriteLine("Loan Status with credit score(620) and salary($90000)  :" + findLoanApproved(620,90000));
            Console.WriteLine("Loan Status with credit score(700) and salary($100000) :" + findLoanApproved(700,100000));
        }
    }
}

Question 2:
-----------

=>Reasoning: 

We will use apply concept to find whether the student is eligible for admission or not.
Conditions for eligibility are that the student should not contain any backlogs and average percentage of last 4 years should be more than 75

=>Program:

using LaYumba.Functional;
using System;
using System.Collections.Generic;
using static LaYumba.Functional.F;

namespace ConsoleApplication
{
    class EitherProb
    {
        static void Main(string[] args)
        {
            List<Tuple<string, int, double, double, double, double>> list = new();
            list.Add(Tuple.Create("Tim",0,82.0,79.8,74.8,72.5));
            list.Add(Tuple.Create("Robert",1,72.0,73.8,74.0,72.5));
            list.Add(Tuple.Create("Steve",0,82.0,73.9,71.0,82.5));
            list.Add(Tuple.Create("Sasha",0,72.0,73.7,74.2,72.5));
            list.Add(Tuple.Create("Quan",2,56.0,49.2,64.9,59.5));

            Func<double, double, double, double, double> average = (year1, year2, year3, year4) => (year1 + year2 + year3 + year4) / 4;

            Func<int, double, double, double, double,string> isEligibleForAdmission = (backlogs, year1, year2, year3, year4) =>
            {
                if (backlogs > 0) return "No";
                if (average(year1, year2, year3, year4) < 75) return "No";
                return "Yes";
            };

            foreach(var item in list)
            {
                Console.WriteLine(item.Item1 + " is eligible for admission: " + Some(isEligibleForAdmission)
                                                                                    .Apply(item.Item2)
                                                                                    .Apply(item.Item3)
                                                                                    .Apply(item.Item4)
                                                                                    .Apply(item.Item5)
                                                                                    .Apply(item.Item6));
            }
        }
    }
}