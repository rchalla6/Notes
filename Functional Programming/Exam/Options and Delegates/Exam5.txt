 Question 1 on options:
----------------------

=>Reasoning: 
 
 

=>Program:



Question 2 on options:
----------------------

=>Reasoning:



=>Program:



Question 3 on multicast delegates:
----------------------------------

=>Reasoning: 

Generally people will go to trips and at the end of the day they want to know the mileage and average speed based on the total distance
travelled and time taken and fuel consumed.
For the following program we will calculate mileage and average speed in one invoke call by taking the inputs from user

=>Program:

using System;

namespace FinalExamination
{
    public delegate void CalculateMileageAndAverageSpeed(double distance, double time, double fuel);
    class MileageAndAverageSpeed
    {
        public static Func<double, double, double, double> funcMileage = (distance, time, fuel) 
            => distance / fuel;
        public static Func<double, double, double, double> funcAvgSpeed = (distance, time, fuel) 
            => distance / time;
        public static void calculateMileage(double distance, double time, double fuel) 
        {
            Console.WriteLine("Mileage: " + Math.Round(funcMileage(distance, time, fuel),3) + " miles/litre");
        }
        public static void calculateAverageSpeed(double distance, double time, double fuel)
        {
            Console.WriteLine("Average speed: " + Math.Round(funcAvgSpeed(distance, time, fuel), 3) + " miles/hour");
        }
        public static void Main(string[] args)
        {
            Console.Write("Enter total distance travelled in miles: ");
            double distance = double.Parse(Console.ReadLine());
            Console.Write("Enter total time travelled in hours: ");
            double hours = double.Parse(Console.ReadLine());
            Console.Write("Enter total fuel consumed in litres: ");
            double fuel = double.Parse(Console.ReadLine());
            CalculateMileageAndAverageSpeed mileageAndAvgSpeed = calculateMileage;
            mileageAndAvgSpeed += calculateAverageSpeed;
            mileageAndAvgSpeed.Invoke(distance, hours, fuel);
        }
    }
}

Question 4 on multicast delegates:
----------------------------------

=>Reasoning: 

Generally we have 2 types of interest calculations simple interest and compound interest and we want to know the values of these 2 types for a given
principal, rate of interest and time. 
For the following program we will calculate simple interest and compound interest in one invoke call by taking the inputs from user

=>Program:

using System;

namespace FinalExamination
{
    public delegate void CalculateInterest(double principalAmount, double rateOfInterest, int time);
    class SimpleInterestAndCompoundInterest
    {
        public static Func<double, double, int, double> funcSI = (principalAmount, rateOfInterest, time) => (principalAmount * (time/12) * rateOfInterest)/100;
        public static Func<double, double, int, double> funcCI = (principalAmount, rateOfInterest, time) => principalAmount * Math.Pow(1 + rateOfInterest/100, (time / 12)) - principalAmount;
        public static void calculateSimpleInterest(double principalAmount, double rateOfInterest, int time) 
        {
            Console.WriteLine("Simple Interest: " + Math.Round(funcSI(principalAmount, rateOfInterest, time),3));
        }
        public static void calculateCompoundInterest(double principalAmount, double rateOfInterest, int time)
        {
            Console.WriteLine("Compound Interest: " + Math.Round(funcCI(principalAmount, rateOfInterest, time), 3));
        }
        public static void Main(string[] args)
        {
            Console.Write("Enter principal amount: ");
            double principalAmount = double.Parse(Console.ReadLine());
            Console.Write("Enter rate of interest per year: ");
            double rateOfInterest = double.Parse(Console.ReadLine());
            Console.Write("Enter duration in months: ");
            int months = Convert.ToInt32(Console.ReadLine());
            CalculateInterest calDiffInterest = calculateSimpleInterest;
            calDiffInterest += calculateCompoundInterest;
            calDiffInterest.Invoke(principalAmount, rateOfInterest, months);
        }
    }
}