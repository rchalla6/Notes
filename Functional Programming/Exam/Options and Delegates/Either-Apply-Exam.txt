Version 1:
==========

Question 1:
-----------

=>Reasoning: 

Usually company provide the bonus to employees based on some criteria. Here we consider the conditions that the employee should be working
in the company for atleast 12 months and should not be in notice period

=>Program:

using LaYumba.Functional;
using System;

namespace FunctionalProgramming
{
    class Either
    {
        public static Either<string, int> calculateBonus(int a, bool b)
        {
            if (a < 12) return " Not eligible : Must have worked in the company for atleast 12 months";
            if (b) return "Not eligible : Employees on notice period are not eligible for Bonus";
            return 5000;
        }
        static void Main(string[] args)
        {
            Console.WriteLine("Bonus: " + calculateBonus(9, false)); // Left( Not eligible : Must have worked in the company for atleast 12 months)
            Console.WriteLine("Bonus: " + calculateBonus(13, false)); // Right(5000)
            Console.WriteLine("Bonus: " + calculateBonus(21, true)); //  Left(Not eligible : Employees on notice period are not eligible for Bonus)
        }
    }
}

Question 2:
-----------

=>Reasoning: 

We use apply concept to calculate the SimpleInterest for a given principal, rate of interest and tenure

=>Program:

using LaYumba.Functional;
using System;
using static LaYumba.Functional.F;

namespace FunctionalProgramming
{
    class Apply
    {
        static void Main(string[] args)
        {
            Func<int, double, int, double> SimpleInterest = (principal, interest, tenure) => (principal * interest * tenure / 12) / 100;
            Console.WriteLine($" Simple Interest for given principal, rate of interest per annum and tenure in months is: " +
                $"  {Some(1000).Map(SimpleInterest).Apply(Some(5.0)).Apply(Some(12))}"); // 50
            Console.WriteLine($" Simple Interest for given principal, rate of interest per annum and tenure in months is: " +
                $"  {Some(2000).Map(SimpleInterest).Apply(Some(4.5)).Apply(Some(24))}"); // 180

        }
    }
}

----------------------------------------------------------------------

Version 2:
==========

Question 1:
-----------

=>Reasoning: 

People book rooms for meeting and for this problem we will use either concept to get the timeslots with availability and error message when slots
are not available or invalid data provided

=>Program:

using LaYumba.Functional;
using System;
using System.Collections.Generic;

namespace FP
{
    class EitherProgram
    {
        public static Either<string, List<int>> findAvailableTimeSlots(List<Tuple<int, bool>> listOfSlots, int hours)
        {
            if (hours <= 0) return "Booking time cannot be less than or equal to 0";
            if (hours > 1) return "Cannot book more than 1 hours";
            bool atleast1SlotAvailable = false;
            List<int> availableTimeSlots = new List<int>();
            foreach(Tuple<int, bool> tuple in listOfSlots)
            {
                if (tuple.Item2)
                {
                    atleast1SlotAvailable = true;
                    availableTimeSlots.Add(tuple.Item1);
                }
            }
            if (!atleast1SlotAvailable) return "No slots available";
            return availableTimeSlots;
        }
        static void Main(string[] args)
        {
            List<Tuple<int, bool>> timeSlotsList = new();
            timeSlotsList.AddRange(new List<Tuple<int, bool>>() {Tuple.Create(9, false), Tuple.Create(10, true), Tuple.Create(11, true), 
                Tuple.Create(12, false), Tuple.Create(13, true), Tuple.Create(14, false), Tuple.Create(15, true), Tuple.Create(16, true)});
            Console.WriteLine(findAvailableTimeSlots(timeSlotsList, 0).Left ?? string.Join(",", findAvailableTimeSlots(timeSlotsList, 0).Right));
            Console.WriteLine(findAvailableTimeSlots(timeSlotsList, 1).Left ?? string.Join(",", findAvailableTimeSlots(timeSlotsList, 1).Right));
            Console.WriteLine(findAvailableTimeSlots(timeSlotsList, 2).Left ?? string.Join(",", findAvailableTimeSlots(timeSlotsList, 2).Right));
        }
    }
}