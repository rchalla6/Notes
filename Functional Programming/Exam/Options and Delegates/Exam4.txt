 Question 1 on options:
----------------------

=>Reasoning: 
 
While we withdraw money we need to have sufficient balance in account for that to be considered as eligible transaction. Customer can enter any value
while withdrawing the money. We need to check if that is a valid number as well as the balance is sufficient for the withdrawal transaction. We will 
use options concept to achieve this where we return some (when it is an eligible transaction) or none (if it is not eligible transaction) 

=>Program:

using LaYumba.Functional;
using static LaYumba.Functional.F;
using System;
using System.Collections.Generic;

namespace FinalExam
{
    class Progam1OnOptions
    {
        static void Main(string[] args)
        {
            List<Tuple<string, double>> bankCustomerDetails = new List<Tuple<string, double>>
            {
                Tuple.Create("1234",25000.0),
                Tuple.Create("2345",32000.0),
                Tuple.Create("3456",2211.0),
                Tuple.Create("4567",10000.0)
            };
            Console.WriteLine("Enter your bank account:");
            string bankAccount = Console.ReadLine();
            Console.WriteLine("Enter how much money you want to withdraw:");
            double withdrawAmount = double.Parse(Console.ReadLine());
            Option<IsEligibleTransaction> transaction = IsEligibleTransaction.transaction(bankAccount,withdrawAmount,bankCustomerDetails);
            if (transaction.ToString().ToLower().Equals("none"))
                Console.WriteLine("Not an eligible transaction");
            else
                Console.WriteLine("Eligible transaction");
            Console.WriteLine("Options result: " + transaction);
        }
    }
    public class IsEligibleTransaction
    {
        public bool isEligibleTrans { get; }
        public IsEligibleTransaction(bool isEligible) => isEligibleTrans = isEligible;
        public static implicit operator bool(IsEligibleTransaction elig) => elig.isEligibleTrans;
        public static Func<string,double, List<Tuple<string, double>>, Option<IsEligibleTransaction>> transaction = 
            (account, amount, bankAccounts) => isValidWithdrawalAmount(amount) && isValidAccount(account, bankAccounts) && isValidTransaction(account, amount, bankAccounts) ? Some(new IsEligibleTransaction(true)) : None;
        static Func<double, bool> isValidWithdrawalAmount = amount => amount > 0;
        static Func<string, List<Tuple<string, double>>, bool> isValidAccount = (account, accounts ) 
            => accounts.FindAll(acc => acc.Item1.Equals(account)).Count > 0;
        static Func<string, double, List<Tuple<string, double>>, bool> isValidTransaction = (account, amount, accounts)
            => accounts.FindAll(acc => acc.Item1.Equals(account) && acc.Item2 > amount).Count > 0;
    }
}

Question 2 on options:
----------------------

=>Reasoning:

Banks will approve loan based on the credit score. So for a given credit score we need to provide whether the customer is eligible for loan or not.
Users can provide any value for the credit score. We need to validate the credit score and provide the response.
For the following program we consider credit score to be atleast 670 for loan to be approved.

=>Program:

using LaYumba.Functional;
using static LaYumba.Functional.F;
using System;
using System.Collections.Generic;

namespace FinalExam
{
    class Progam2OnOptions
    {
        static void Main(string[] args)
        {
            List<int> creditScores = new() { 554,765,496,802,599,-800 };
            foreach(int creditScore in creditScores)
            {
                Option<LoanApproved> loan = LoanApproved.checkCreditScoreForLoanApproval(creditScore);
                if (loan.ToString().ToLower().Equals("none"))
                    Console.WriteLine("Credit Score " + creditScore + " is not eligible for loan dispersal");
                else
                    Console.WriteLine("Credit Score " + creditScore + " is eligible for loan dispersal");
            }
        }
    }
    public class LoanApproved
    {
        public bool IsLoanApproved { get; }
        public LoanApproved(bool isEligible) => IsLoanApproved = isEligible;

        public static implicit operator bool(LoanApproved loanApproved) => loanApproved.IsLoanApproved;

        public static Func<int, Option<LoanApproved>> checkCreditScoreForLoanApproval = (credScore) => isValidCredScore(credScore) && isCredScoreSufficient(credScore) ? Some(new LoanApproved(true)) : None;
        
        static readonly Func<int, bool> isValidCredScore = score => score > 0;
        
        static readonly Func<int, bool> isCredScoreSufficient = score => score >= 670;
    }
}

Question 3 on multicast delegates:
----------------------------------

=>Reasoning: 

When we prepare any dish we need a set of ingredients and based on the quantity of the preparation of dish the quantity of ingredients changes. 
For the following program we will take the preparation of chicken pickle dish and find the quantity of ingredients required for the quantity of
preparation of pickle given by user.
For 1 kg preparation of pickle we consider the following amount of quantity for each ingredient

2 table spoon turmeric powder
2 cups chilli powder
1/2kg mustard oil
1cup lemon juice
100g ginger

=>Program:

using System;

namespace FinalExam
{
    public delegate void ChickenPickleIngredients(double chickenQuantity);
    class Progam1OnDelegates
    {
        static readonly Func<double, int> tumericPow = (quan) => (int)(2 * quan);
        static readonly Func<double, int> chilliPow = (quan) => (int)(2 * quan);
        static readonly Func<double, double> oil = (quan) => Math.Round(quan/2,2);
        static readonly Func<double, double> lemon = (quan) => Math.Round(quan, 2);
        static readonly Func<double, int> ginger = (quan) => (int)(quan * 100);

        static void calculateGinger(double chickenQuantity) =>
            Console.WriteLine("Ginger: " + ginger(chickenQuantity) + "grams");
        static void calculateLemonJuice(double chickenQuantity) =>
            Console.WriteLine("Lemon juice: " + lemon(chickenQuantity) + " cups");
        static void calculateOil(double chickenQuantity) =>
            Console.WriteLine("Mustard oil: " + oil(chickenQuantity) + "kg");
        static void calculateChilliPowder(double chickenQuantity) =>
            Console.WriteLine("Chilli powder: " + chilliPow(chickenQuantity) + " cups");
        static void calculateTurmericPowder(double chickenQuantity) => 
            Console.WriteLine("Turmeric powder: " + tumericPow(chickenQuantity) + " table spoons");
        static void Main(string[] args)
        {
            Console.Write("Enter quantity of chicken to be prepared in kgs: ");
            double quantity = double.Parse(Console.ReadLine());
            Console.WriteLine("\nMultiCast delegates to find quantity of ingredients:");
            ChickenPickleIngredients chickenPickleIngredients = calculateTurmericPowder;
            chickenPickleIngredients += calculateChilliPowder;
            chickenPickleIngredients += calculateOil;
            chickenPickleIngredients += calculateLemonJuice;
            chickenPickleIngredients += calculateGinger;
            chickenPickleIngredients.Invoke(quantity);
        }
    }
}


Question 4 on multicast delegates:
----------------------------------

=>Reasoning: 

We generally come across online application advertisements saying if you deposit some amount into wallet bonus will be added as an offer. We can use
multicast to call multiple functions to add balance as well as to check if the deposit amount satisfies the criteria for bonus reward.
Condition for the bonus reward(extra 500) is to deposit 5000 into the wallet.
For the following program we consider 2 scenarios
1. Previous balance is 2000 and deposited 6000 so the balance in the wallet should be 8500 as it satisfies reward condition
2. Previous balance is 3000 and deposited 2000 so the balance in the wallet should be 5000 as it does not satisfy reward condition

=>Program:

using System;

namespace FinalExam
{
    public delegate void DepositAmountToAccount(double finalAmount);
    class Progam2OnDelegates
    {
        public static double balanceAmount = 2000.0;
        static Func<double, double> depositBonusAmount = (dep) => dep >= 5000 ? 500 : 0;
        static void DepositAmount(double dep)
        {
            balanceAmount += dep;
        }
        static void DepositBonusAmount(double dep)
        {
            balanceAmount += depositBonusAmount(dep);
        }
        static void Main(string[] args)
        {
            Console.WriteLine("Scenario 1:\nPrevious balance is $" + balanceAmount + " and depositing amount $6000");
            DepositAmountToAccount depAmount = DepositAmount;
            depAmount += DepositBonusAmount;
            depAmount.Invoke(6000);
            Console.WriteLine("Final amount is:" + balanceAmount);
            balanceAmount = 3000;
            Console.WriteLine("\nScenario 2:\nPrevious balance is $" + balanceAmount + " and depositing amount $2000");
            depAmount.Invoke(2000);
            Console.WriteLine("Final amount is:" + balanceAmount);
        }
    }
}
