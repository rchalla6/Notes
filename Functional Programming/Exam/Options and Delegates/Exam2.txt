Question 1 on options:
----------------------

=>Reasoning: 
 
Generally we will have different type of membership account in stores and they will get different additional discounts based on the membership.
People with no membership may get the discount of the store but there won't be any additional discount. We can use of options concept here to get
the final amount after applying the discount based on the membership.
Here we take an example of a store where a sale is going on and the default discount is 10% of the total amount.
There are two types of membership:
Gold membership who will get additional 5% discount on top of sale discount.
Diamond membership who will get additional 10% discount on top of sale discount. 
We will be calculating the final amount after applying the discounts based on membership.

=>Program:

using LaYumba.Functional;
using static LaYumba.Functional.F;
using System;

namespace Examination
{
    class Option1
    {
        static void Main(string[] args)
        {
            //Function which returns the final amount based on membership and using options functionality
            Func<Option<double>, int, double> NetAmountBasedOnMembership = (memberShip, amount) => memberShip.Match(
                 () => amount - (amount * 0.05),
                 (memberShipType) => memberShipType == 1 ? 
                                    amount - (amount * 0.05) - (amount * 0.05) : 
                                    amount - (amount * 0.05) - (amount * 0.1)
            );

            Console.WriteLine("If the bill amount is $2000 and the customer is normal member then the final net amount to be payable is:$" 
                + NetAmountBasedOnMembership(None, 2000));
            Console.WriteLine("If the bill amount is $2000 and the customer is gold member then the final net amount to be payable is:$"
                + NetAmountBasedOnMembership(1, 2000));
            Console.WriteLine("If the bill amount is $2000 and the customer is diamond member then the final net amount to be payable is:$"
                + NetAmountBasedOnMembership(2, 2000));
        }
    }
}

Question 2 on options:
----------------------

=>Reasoning:

There is a concept called flagship phones in the mobile phones terminology and usually a mobile is called flagship phone of the brand if the phone
has high level features with most value for money. We can use the options concept to check whether a mobile is flagship phone or not.
So we consider the following conditions to check whether the phone is flagship phone or not.
1. If the price is from [200,300) then the features should include
	- Minimum 6GB Ram
	- Minimum 32MP Camera Resolution
	- Minimum 128GB Storage

1. If the price is from [300,500) then the features should include
	- Minimum 12GB Ram
	- Minimum 64MP Camera Resolution
	- Minimum 256GB Storage

=>Program:

using LaYumba.Functional;
using static LaYumba.Functional.F;
using System;
using System.Collections.Generic;
using System.Linq;

namespace Examination
{
    class Option2
    {
        static void Main(string[] args)
        {
            string isMobileFlag(Option<List<Mobile>> l) 
                => l.Match<string>(
                    () => "Give a List of Integers instead of None",
                    (m) => string.Join(",", m.FindAll(m => (m.price >= 200 && m.price < 300 && m.ram >= 6 && m.cameraResolution >= 32 && m.storage >= 128) ||
                            (m.price >= 300 && m.price < 500 && m.ram >= 8 && m.cameraResolution >= 64 && m.storage >= 256)).Select(x => x.name).ToArray()) +
                            " are flagship phones among the list"
                );
            List<Mobile> mobileList = new List<Mobile>();
            mobileList.Add(new Mobile("\"OnePlus Nord N10\"", 299.99,6,64,128));
            mobileList.Add(new Mobile("\"TCL 10L\"", 299.99,6,48,256));
            mobileList.Add(new Mobile("\"OnePlus 8 Pro\"", 947.20,12,48,256));
            mobileList.Add(new Mobile("\"DOOGEE S88 Plus\"", 369.99,8,48,128));
            mobileList.Add(new Mobile("\"Samsung Galaxy A52\"", 499.99,8,64,256));
            Console.WriteLine("Using options:");
            Option<List<Mobile>> mob = Some(mobileList);
            Console.WriteLine(isMobileFlag(mob));
        }
    }

    class Mobile
    {
        public string name { get; set; }
        public double price { get; set; }
        public int ram { get; set; }
        public int cameraResolution { get; set; }
        public int storage { get; set; }
        public Mobile(string name, double price, int ram, int cameraResolution, int storage)
        {
            this.name = name;
            this.price = price;
            this.ram = ram;
            this.cameraResolution = cameraResolution;
            this.storage = storage;
        }
    }
}


Question 3 on multicast delegates:
----------------------------------

=>Reasoning: 

Students or professionals usually add notes while learning something. So we will use this scenario to use multi delegates functionality. One function
is used to display the content on the screen whereas other function is used to write the content added to the file. We will use multicast delegate 
functionality to run both these at same time
1. Display the content on the screen
2. Append the content to the file in the disk

=>Program:

using System;
using System.IO;

namespace Examination
{
    public delegate void NotesProcessMethods(string notes);
    class Delegate1
    {
        static void printNotesOnScreen(string notes)
        {
            Console.WriteLine("This method is used to print content on the screen");
            Console.WriteLine(notes);
        }
        static void addNotesToFileInDisk(string notes)
        {
            Console.WriteLine("This method is used to store content in the file on the disk");
            File.AppendAllText("./notes.txt", notes);
        }
        static void Main(string[] args)
        {
            while (true)
            {
                Console.WriteLine("\n1. Please enter 1 to add notes");
                Console.WriteLine("2. Exit");
                Console.Write("Enter option:");
                int c = Convert.ToInt32(Console.ReadLine());
                if (c == 1)
                {
                    Console.Write("Enter notes you want to append: ");
                    string n = Console.ReadLine();
                    NotesProcessMethods notesDelegate = printNotesOnScreen;
                    notesDelegate += addNotesToFileInDisk;
                    Console.WriteLine("\nUsing Multi Cast delegate:");
                    notesDelegate.Invoke(n);
                }
                else
                    break;
            }
        }
    }
}

Question 4 on multicast delegates:
----------------------------------

=>Reasoning: 

When we take a home loan to buy a house we usually wants to know the interest amount we pay and the emi payment schedule. So for a given principal
interest rate and no of years we find the mortgage and the payment schedule using the multicast delegates
So for a given principal, interest and no of years using delegates we find
1. Mortgage
2. Payment schedule

=>Program:

using System;
using System.IO;

namespace Examination
{
    public delegate void MortgageCalculations(int principal, double annualInterestRate, int years);
    class Delegate2
    {
        static void findMortgage(int principal, double annualInterestRate, int years)
        {
            double rateOfInterestPerMonth = annualInterestRate / (100 * 12);
            int numberOfPayments = years * 12;

            double intermediateResult = Math.Pow(1 + rateOfInterestPerMonth, numberOfPayments);
            double mortgage = principal * rateOfInterestPerMonth * (intermediateResult / (intermediateResult - 1));
            Console.WriteLine("\nMORTGAGE");
            Console.WriteLine("--------");
            Console.WriteLine("Monthly Payments: " + Math.Round(mortgage, 2));
        }
        static void findPaymentSchedule(int principal, double annualInterestRate, int years)
        {
            var balances = new double[years * 12];
            for (short month = 1; month <= balances.Length; month++)
            {
                double rateOfInterestPerMonth = annualInterestRate / (100 * 12);
                float numberOfPayments = years * 12;
                double intermediateResultForN = Math.Pow(1 + rateOfInterestPerMonth, numberOfPayments);
                double intermediateResultForP = Math.Pow(1 + rateOfInterestPerMonth, month);
                double balanceAmount = (principal * (intermediateResultForN - intermediateResultForP)) / (intermediateResultForN - 1);
                balances[month - 1] = balanceAmount; ;
            }
            Console.WriteLine("\nPAYMENT SCHEDULE");
            Console.WriteLine("----------------");
            foreach (double balance in balances)
                Console.WriteLine(Math.Round(balance,2));
        }
        static void Main(string[] args)
        {
            Console.Write("Please enter principal amount: ");
            int principleAmount = Convert.ToInt32(Console.ReadLine());
            Console.Write("Please enter annual interest rate: ");
            double interestRate = double.Parse(Console.ReadLine());
            Console.Write("Please enter years: ");
            int years = Convert.ToInt32(Console.ReadLine());
            Console.WriteLine("Using delegates following mortgage calculations are performed:");
            MortgageCalculations mortgageCalculations = findMortgage;
            mortgageCalculations += findPaymentSchedule;
            mortgageCalculations.Invoke(principleAmount, interestRate, years);
        }
    }
}

