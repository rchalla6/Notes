Short Version:

FIFTH POWER GREATER THAN A PARTICULAR NUMBER:
---------------------------------------------

using System;
using System.Linq;

namespace ConsoleApplicationTest 
{
    class Program
    {
        static void Main(string[] args)
        {
            Func<int, bool> func = x => Math.Pow(x,5) > 3000;
            //Range is 9 as numbers are from 2 to 10
            int[] filNum = Enumerable.Range(2, 9).Where(func).ToArray();
            foreach (int g in filNum)
                Console.WriteLine(g);
        }
    }
}

CIRCLE ATTRIBUTES USING TUPLE:
------------------------------

using System;

namespace ConsoleApplicationTest 
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Enter radius of circle:"); double r = Convert.ToDouble(Console.ReadLine());
            calculateAreaPerDia(r, out double a, out double p, out double d);
            Tuple<double, double, double>  t = Tuple.Create(a, p, d);
            Console.WriteLine("Radius:" + r + " -----> Area:" + t.Item1 + ", Perimeter:" + t.Item2 + ", Diameter:" + t.Item3);
        }

        static void calculateAreaPerDia(double r, out double a, out double p, out double d)
        {
            a = Math.PI * r * r; p = 2 * Math.PI * r; d = 2 * r;
        }
    }
}

PRINTING SALUTATION BASED ON TIME:
----------------------------------

using System;

namespace ConsoleApplicationTest 
{
    class Program
    {
        static void Main(string[] args)
        {
            Func<int, string> funcWishes = w => w < 18 ?  w < 12 ? "Good Morning" : "Good Afternoon" : "Good Evening";
            Console.WriteLine(funcWishes(DateTime.Now.Hour));
        }
    }
}

EVEN NUMBERS:
-------------

using System;
using System.Linq;

namespace ConsoleApplicationTest 
{
    class Program
    {
        static void Main(string[] args)
        {
            Func<int, bool> isEven = ev => ev % 2 == 0;
            int[] evenNums = Enumerable.Range(11, 20).Where(isEven).ToArray();
            Console.WriteLine("Even numbers");
            foreach (int evenNum in evenNums)
                Console.WriteLine(evenNum);
        }
    }
}

SORT THE TUPLES LIST HAVING INT AND STRING ALPHABETICALLY:
----------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;

namespace ConsoleApplicationTest 
{
    class Program
    {
        static void Main(string[] args)
        {
            List<Tuple<int, string>> li = new List<Tuple<int, string>>();
            li.Add(Tuple.Create(1, "Professor")); li.Add(Tuple.Create(2, "Lisbon"));
            li.Add(Tuple.Create(3, "Moscow")); li.Add(Tuple.Create(4, "Nairobi"));
            li.Add(Tuple.Create(5, "Tokyo")); li.Add(Tuple.Create(6, "Rio"));
            li.Add(Tuple.Create(7, "Denver")); li.Add(Tuple.Create(8, "Palermo"));
            li.Add(Tuple.Create(9, "Helsinki")); li.Add(Tuple.Create(10, "Oslo"));
            List<Tuple<int, string>> newLi = li.OrderBy(x => x.Item2).ToList();
            foreach (Tuple<int, String> t in newLi)
                Console.WriteLine(t.Item2 + "," + t.Item1);
        }
    }
}

LISTING OUT WORDS HAVING UNIQUE CHARACTERS:
-------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;

namespace ConsoleApplicationTest 
{
    class Program
    {
        static void Main(string[] args)
        {
            Func<string, bool> func = x => x.ToLower().Distinct().Count() == x.Length;
            List<string> uniqueWordsList = (new List<string> { "Cat", "Houston", "America", "Flags", "Texas", "Labor Day" }).Where(func).ToList();
            foreach (string uniqueWord in uniqueWordsList)
                Console.WriteLine(uniqueWord);
        }
    }
}

TUPLES FILTERING AND SORTING:
-----------------------------

using System;
using System.Collections.Generic;
using System.Linq;

namespace ConsoleApplicationTest 
{
    class Program
    {
        static void Main(string[] args)
        {
            List<Tuple<string, string, int, string>> carsDetails = new();
            Console.WriteLine("Total cars to be added:"); int TotalCars = Convert.ToInt32(Console.ReadLine());
            for (int i = 1; i <= TotalCars; i++)
            {
                Console.WriteLine("Enter Car " + i + " details");
                Console.WriteLine("Type:"); string type = Console.ReadLine();
                Console.WriteLine("Color:"); string color = Console.ReadLine();
                Console.WriteLine("Seat size:"); int seats = Convert.ToInt32(Console.ReadLine());
                Console.WriteLine("Engine:"); string engine = Console.ReadLine();
                carsDetails.Add(Tuple.Create(type, color, seats, engine));
            }

            if (carsDetails.Count != 0)
            {
                List<Tuple<string, string, int, string>> v6EngCars = carsDetails.Where(x => x.Item4.ToLower().Equals("v6")).ToList();
                if (v6EngCars.Count != 0)
                {
                    List<Tuple<string, string, int, string>> v6EngCarsColorSorted = v6EngCars.OrderBy(x => x.Item2).ToList();
                    Console.WriteLine("Colors sorted:");
                    foreach (Tuple<string, string, int, string> sortedV6EngCar in v6EngCarsColorSorted)
                        Console.WriteLine(sortedV6EngCar.Item2);
                }
            }
        }
    }
}